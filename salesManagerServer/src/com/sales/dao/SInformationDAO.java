package com.sales.dao;

import java.util.List;

import com.sales.model.SInformation;
import com.sales.model.SimpleNameValue;

public interface SInformationDAO {
    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    void insert(SInformation record);

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    int updateByPrimaryKey(SInformation record);

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    int updateByPrimaryKeySelective(SInformation record);

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public SInformation selectByPrimaryKey(Integer informationId);

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int deleteByPrimaryKey(Integer informationId);
    
    /**
     * @param sendUserId
     * @param type
     * @param status
     * @param pageNumber
     * @param pageSize
     * @param procInfoOnly
     * @return
     */
    public List<SInformation> getInfoListByUserId(Integer sendUserId, 
    		Integer type, Integer status,
    		Long pageNumber, int pageSize, boolean procInfoOnly);
    
    /**
     * @param sendUserId
     * @param type
     * @param status
     * @param ProcInfoOnly
     * @return
     */
    public Integer getInfoCountByUserId(Integer sendUserId, Integer type, Integer status, boolean procInfoOnly);
    
    /**
     * @param status
     * @param sendUserId
     * @param ProcInfoOnly
     * @return
     */
    public List<SInformation> getInfoListByStatus(Integer status,Integer sendUserId);
    
    /**
     * 修改指定的url消息状态
     * @param url
     * @param status
     */
    public void updateStatusByUrl(String url, Integer userId, Integer status);
    
    /**
     * 修改指定用户的消息状态
     * @param userId
     * @param status
     */
    public void updateStatusByUserId(Integer userId, Integer status);
    
    /**
     * 查询指定用户各类未读消息的总数
     * @param userId
     * @return
     */
    public List<SimpleNameValue> getUnreadedInfoGroupCounts(Integer userId);
}