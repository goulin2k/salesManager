package com.sales.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sales.dao.SCustomerOwnerUserDAO;
import com.sales.model.K3OrderCustomerStatistics;
import com.sales.model.SCustomerOwnerUser;

import my.com.ibatis.core.dao.support.Page;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class SCustomerOwnerUserDAOImpl extends SqlMapClientDaoSupport implements SCustomerOwnerUserDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public SCustomerOwnerUserDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public void insert(SCustomerOwnerUser record) {
        getSqlMapClientTemplate().insert("s_customer_owner_user.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int updateByPrimaryKey(SCustomerOwnerUser record) {
        int rows = getSqlMapClientTemplate().update("s_customer_owner_user.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int updateByPrimaryKeySelective(SCustomerOwnerUser record) {
        int rows = getSqlMapClientTemplate().update("s_customer_owner_user.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public SCustomerOwnerUser selectByPrimaryKey(Integer customerOwnerUserId) {
        SCustomerOwnerUser key = new SCustomerOwnerUser();
        key.setCustomerOwnerUserId(customerOwnerUserId);
        SCustomerOwnerUser record = (SCustomerOwnerUser) getSqlMapClientTemplate().queryForObject("s_customer_owner_user.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_customer_owner_user
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int deleteByPrimaryKey(Integer customerOwnerUserId) {
        SCustomerOwnerUser key = new SCustomerOwnerUser();
        key.setCustomerOwnerUserId(customerOwnerUserId);
        int rows = getSqlMapClientTemplate().delete("s_customer_owner_user.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

	@Override
	public List<SCustomerOwnerUser> getCOUserListByUserId(Integer userId) {
		
		List cOUserList = getSqlMapClientTemplate().queryForList("s_customer_owner_user.getCOUserListByUserId", userId);
		return cOUserList;
	}

	@Override
	public Integer getCOUCount(SCustomerOwnerUser couser, String customerIds,  int oweredStatus) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		
		queryMap.put("userId",couser.getUserId());
		queryMap.put("customerId",couser.getCustomerId());
		queryMap.put("customerName",couser.getCustomerName());
		queryMap.put("userName",couser.getUserName());
		queryMap.put("customerIds",customerIds);
		queryMap.put("oweredStatus",oweredStatus);
		queryMap.put("finmanagerName", couser.getFinmanagerName());
		queryMap.put("salegenName", couser.getSalegenName());
		queryMap.put("customerNumber", couser.getCustomerNumber());
		Integer temp = (Integer) getSqlMapClientTemplate().queryForObject("s_customer_owner_user.getCOUCount",queryMap);
		return temp;
	}

	@Override
	public List<SCustomerOwnerUser> getCOUList(Long pageNumber, int pageSize, 
			SCustomerOwnerUser couser, String customerIds, int oweredStatus) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("startRow", startRow);
		queryMap.put("endRow",endRow);
		queryMap.put("userId",couser.getUserId());
		queryMap.put("customerId",couser.getCustomerId());
		queryMap.put("customerName",couser.getCustomerName());
		queryMap.put("userName",couser.getUserName());
		queryMap.put("customerIds",customerIds);
		queryMap.put("oweredStatus",oweredStatus);
		queryMap.put("finmanagerName", couser.getFinmanagerName());
		queryMap.put("salegenName", couser.getSalegenName());
		queryMap.put("customerNumber", couser.getCustomerNumber());
		List couList = getSqlMapClientTemplate().queryForList("s_customer_owner_user.getCOUList",queryMap);
		return couList;
	}
	
	public List<SCustomerOwnerUser> getUserListByCustomerId(Integer customerId) {
		
		List cOUserList = getSqlMapClientTemplate().queryForList("s_customer_owner_user.getUserListByCustomerId", customerId);
		return cOUserList;
	}

	@Override
	public void deleteByCustomerId(Integer customerId) {
		
		int rows = getSqlMapClientTemplate().delete("s_customer_owner_user.deleteByCustomerId", customerId);
	}

	@Override
	public Integer getHistoryCOUCount(SCustomerOwnerUser couser,
			String customerIds, int oweredStatus) {
		
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("userId",couser.getUserId());
		queryMap.put("customerId",couser.getCustomerId());
		queryMap.put("customerName",couser.getCustomerName());
		queryMap.put("userName",couser.getUserName());
		queryMap.put("customerIds",customerIds);
		queryMap.put("oweredStatus",oweredStatus);
		Integer temp = (Integer) getSqlMapClientTemplate().queryForObject("s_customer_owner_user.getHistoryCOUCount",queryMap);
		return temp;
	}

	@Override
	public List<SCustomerOwnerUser> getHistoryCOUList(Long pageNumber,
			int pageSize, SCustomerOwnerUser couser, String customerIds,
			int oweredStatus) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("startRow", startRow);
		queryMap.put("endRow",endRow);
		queryMap.put("userId",couser.getUserId());
		queryMap.put("customerId",couser.getCustomerId());
		queryMap.put("customerName",couser.getCustomerName());
		queryMap.put("userName",couser.getUserName());
		queryMap.put("customerIds",customerIds);
		queryMap.put("oweredStatus",oweredStatus);
		List couList = getSqlMapClientTemplate().queryForList("s_customer_owner_user.getHistoryCOUList",queryMap);
		return couList;
	}

	@Override
	public void updateCustomerOwerUser(SCustomerOwnerUser record) {
		
		getSqlMapClientTemplate().update("s_customer_owner_user.updateCustomerOwerUserById", record);
	}
	
}