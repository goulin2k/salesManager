package com.sales.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sales.dao.SInformationDAO;
import com.sales.model.SInformation;
import com.sales.model.SimpleNameValue;

import my.com.ibatis.core.dao.support.Page;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class SInformationDAOImpl extends SqlMapClientDaoSupport implements SInformationDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public SInformationDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public void insert(SInformation record) {
        getSqlMapClientTemplate().insert("s_information.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int updateByPrimaryKey(SInformation record) {
        int rows = getSqlMapClientTemplate().update("s_information.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int updateByPrimaryKeySelective(SInformation record) {
        int rows = getSqlMapClientTemplate().update("s_information.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public SInformation selectByPrimaryKey(Integer informationId) {
        SInformation key = new SInformation();
        key.setInformationId(informationId);
        SInformation record = (SInformation) getSqlMapClientTemplate().queryForObject("s_information.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_information
     *
     * @abatorgenerated Tue Apr 23 17:36:30 CST 2013
     */
    public int deleteByPrimaryKey(Integer informationId) {
        SInformation key = new SInformation();
        key.setInformationId(informationId);
        int rows = getSqlMapClientTemplate().delete("s_information.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

	@Override
	public List<SInformation> getInfoListByUserId(Integer sendUserId, 
			Integer type, Integer status,
			Long pageNumber, int pageSize, boolean procInfoOnly) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("sendUserId", sendUserId);
		if(!(type == null || type.intValue() == 0))
			queryMap.put("type", type);
		if(status != null)
			queryMap.put("status", status);
		queryMap.put("startRow", startRow);
		queryMap.put("endRow", endRow);
//		if(procInfoOnly == false)
//			queryMap.put("procInfoOnly", new Boolean(procInfoOnly));
		
		List infoList = getSqlMapClientTemplate().queryForList("s_information.getInfoListByUserId",queryMap);
		return infoList;
	}

	@Override
	public Integer getInfoCountByUserId(Integer sendUserId, 
			Integer type, Integer status, boolean procInfoOnly) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("sendUserId", sendUserId);
		if(!(type == null || type.intValue() == 0))
			queryMap.put("type", type);
		if(status != null)
			queryMap.put("status", status);
		if(procInfoOnly == false)
			queryMap.put("procInfoOnly", new Boolean(procInfoOnly));
		Integer infoCount = (Integer) getSqlMapClientTemplate().queryForObject("s_information.getInfoCountByUserId",queryMap);
		return infoCount;
	}

	@Override
	public List<SInformation> getInfoListByStatus(Integer status,Integer sendUserId) {
		
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("sendUserId", sendUserId);
		queryMap.put("status", status);
		
		List infoList = getSqlMapClientTemplate().queryForList("s_information.getInfoListByStatus",queryMap);
		return infoList;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SInformationDAO#updateStatusByUrl(java.lang.String, int)
	 */
	@Override
	public void updateStatusByUrl(String url, Integer userId, Integer status) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("imageUrl", url);
		queryMap.put("userId", userId);
		queryMap.put("status", status);
		getSqlMapClientTemplate().update("s_information.updateStatusByUrl", queryMap);
	}

	@Override
	public void updateStatusByUserId(Integer userId, Integer status) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("userId", userId);
		queryMap.put("status", status);
		getSqlMapClientTemplate().update("s_information.updateStatusByUserId", queryMap);
		
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SInformationDAO#getUnreadedInfoGroupCounts(java.lang.Integer)
	 */
	@Override
	public List<SimpleNameValue> getUnreadedInfoGroupCounts(Integer userId) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("userId", userId);
		List list = getSqlMapClientTemplate().queryForList("s_information.getInfoGroupByUserId", queryMap);
		
		return list;
	}
}