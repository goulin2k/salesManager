package com.sales.dao.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.sales.dao.SSalesProjectDAO;
import com.sales.model.SProjectAttentionUser;
import com.sales.model.SSalesProject;
import com.sales.model.SalePlanStatistics;
import com.sales.model.SalePlanWithActivityVO;

public class SSalesProjectDAOImpl extends SqlMapClientDaoSupport implements SSalesProjectDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_sales_project
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public SSalesProjectDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_sales_project
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public Integer insertSalesProject(SSalesProject project) {
    	return (Integer) getSqlMapClientTemplate().insert("s_sales_project.insertSalesProject", project);
    }
    
    public void insertProjectAttentionUser(SProjectAttentionUser user){
    	getSqlMapClientTemplate().insert("s_sales_project.insertProjectAttentionUser", user);
    } 
    
    

    /* (non-Javadoc)
	 * @see com.sales.dao.SSalesProjectDAO#commitSalesProject(com.sales.model.SSalesProject)
	 */
	@Override
	public void commitSalesProject(SSalesProject project) {
		getSqlMapClientTemplate().update("s_sales_project.updareSalesProjectStatus", project);
		
	}

	/**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_sales_project
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public int deleteByPrimaryKey(Integer projectId) {
        SSalesProject key = new SSalesProject();
        key.setProjectId(projectId);
        int rows = getSqlMapClientTemplate().delete("s_sales_project.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }
    
    public SSalesProject getProjectById(Map queryMap) { 
        SSalesProject record = (SSalesProject) getSqlMapClientTemplate().queryForObject("s_sales_project.getProjectById", queryMap);
        return record;
    } 
    
    public List getProjectList(Map queryMap){
    	List projectList = getSqlMapClientTemplate().queryForList("s_sales_project.getProjectList", queryMap);
    	return projectList;
    }
    
    public Integer getProjectCount(Map queryMap){
    	Integer projectCount = (Integer) getSqlMapClientTemplate().queryForObject("s_sales_project.getProjectCount", queryMap);
    	return projectCount;
    }
    
    
    
    /* (non-Javadoc)
	 * @see com.sales.dao.SSalesProjectDAO#getProjectListMobile(java.util.Map)
	 */
	@Override
	public List getProjectListMobile(Map queryMap) {
		List projectList = getSqlMapClientTemplate().queryForList("s_sales_project.getProjectListM", queryMap);
    	return projectList;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SSalesProjectDAO#getProjectCountMobile(java.util.Map)
	 */
	@Override
	public Integer getProjectCountMobile(Map queryMap) {
		Integer projectCount = (Integer) getSqlMapClientTemplate().queryForObject("s_sales_project.getProjectCountM", queryMap);
    	return projectCount;
	}

	public void updateProject(SSalesProject project){
    	getSqlMapClientTemplate().update("s_sales_project.updateProject", project);
    }
    
    public void deleteAttentionUserByProject(Integer projectId){
    	getSqlMapClientTemplate().delete("s_sales_project.deleteAttentionUserByProject", projectId);
    }
    
    public void updateSalesProjectRate(SSalesProject project){
    	getSqlMapClientTemplate().update("s_sales_project.updateSalesProjectRate", project);
    }
    
    public List getAttentionUserByProjectId(Integer projectId){
    	List attentionUser = getSqlMapClientTemplate().queryForList("s_sales_project.getAttentionUserByProjectId", projectId);
    	return attentionUser;
    }
    
    public List getProjectOpenList(Map queryMap){
    	List projectList = getSqlMapClientTemplate().queryForList("s_sales_project.getProjectOpenList", queryMap);
    	return projectList;
    }
    
    public Integer getProjectOpenCount(Map queryMap){
    	Integer projectCount = (Integer) getSqlMapClientTemplate().queryForObject("s_sales_project.getProjectOpenCount", queryMap);
    	return projectCount;
    }

	@Override
	public List getProjectByCustomerProjectId(Integer customerProjectId) {
		
		List projectList = getSqlMapClientTemplate().queryForList("s_sales_project.getProjectByCustomerProjectId", customerProjectId);
		return projectList;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SSalesProjectDAO#getPlanExecuteStatistics(java.lang.Integer, java.util.Date, java.util.Date)
	 */
	@Override
	public List<SalePlanStatistics> getPlanExecuteStatistics(String childrenUserIds, Date startTime,
			Date endTime) {
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("childrenUserIds", childrenUserIds);
		queryMap.put("startTime", startTime);
		queryMap.put("endTime", endTime);
		List<SalePlanStatistics> list = getSqlMapClientTemplate().queryForList(
				"s_sales_project.reportWeekly", queryMap);
		return list;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SSalesProjectDAO#getPlanExecuteStatistics(java.lang.Integer, java.util.Date, java.util.Date)
	 */
	@Override
	public List<SalePlanWithActivityVO> getPersonPlanExecuteStatistics(
			Integer userId, Date startTime, Date endTime) {
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("userId", userId);
		queryMap.put("startTime", startTime);
		queryMap.put("endTime", endTime);
		List<SalePlanWithActivityVO> list = getSqlMapClientTemplate().queryForList(
				"s_sales_project.personPlanWeekly", queryMap);
		return list;
	}
	
	
	
	
    
}