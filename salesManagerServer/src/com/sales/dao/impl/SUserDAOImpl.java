package com.sales.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sales.dao.SUserDAO;
import com.sales.model.SPosition;
import com.sales.model.SUser;
import com.sales.model.User;

import my.com.ibatis.core.dao.support.Page;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class SUserDAOImpl extends SqlMapClientDaoSupport implements SUserDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_user
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public SUserDAOImpl() {
        super();
    }

    public List<SUser> getUserList(Long pageNumber, int pageSize) {
    	long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("startRow", startRow);
		queryMap.put("endRow", endRow);
    	List userList  = getSqlMapClientTemplate().queryForList("s_user.getSUserList",queryMap);
		return userList;
	}
    
    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_user
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public void insert(SUser user) {
        getSqlMapClientTemplate().insert("s_user.insertSUser", user);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_user
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public void updateSUserById(SUser user) {
        getSqlMapClientTemplate().update("s_user.updateSUserById", user);
    } 

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_user
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public SUser getSUserById(Integer userId) { 
        SUser user = (SUser) getSqlMapClientTemplate().queryForObject("s_user.getSUserById", userId);
        return user;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table s_user
     *
     * @abatorgenerated Tue Apr 23 17:36:31 CST 2013
     */
    public void deleteUser(Integer userId) {
        SUser user = new SUser();
        user.setUserId(userId);
        user.setStatus(0);
        getSqlMapClientTemplate().update("s_user.deleteSUser", user); 
    }
    
    public SUser getSUserByPassword(SUser user) {
    	SUser rUser = (SUser) getSqlMapClientTemplate().queryForObject("s_user.getSUserByPassword", user);
        return rUser;
    }

	@Override
	public Integer getUserCount() {
		
		
		Integer temp = (Integer) getSqlMapClientTemplate().queryForObject("s_user.getUserCount");
		return temp;
	}

	@Override
	public SUser getSUserByUserName(String loginName) {
		
		SUser rUser = (SUser) getSqlMapClientTemplate().queryForObject("s_user.getSUserByUserName", loginName);
        return rUser;
	}
	
	public List getSUserByParentId(Integer parentId){
		List userList = (List) getSqlMapClientTemplate().queryForList("s_user.getSUserByParentId", parentId);
		return userList;
		
	}

	@Override
	public List<SUser> getPerformanceUserList(Integer postType,Integer postId) {
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("postType", postType);
		queryMap.put("postId", postId);
		return getSqlMapClientTemplate().queryForList("s_user.getPerformanceUserList",queryMap);
	}

	@Override
	public List<SUser> getUserListByPosition(SPosition position) {
		return getSqlMapClientTemplate().queryForList("s_user.getUserListByPosition",position);
	}

	@Override
	public List<SUser> getChildUsersById(Integer userId) {
		
		List userList = (List) getSqlMapClientTemplate().queryForList("s_user.getChildUsersById", userId);
		return userList;
	}

	
	/* (non-Javadoc)
	 * @see com.sales.dao.SUserDAO#getParentUsersById(java.lang.Integer)
	 */
	@Override
	public List<SUser> getParentUsersById(Integer userId) {
		List userList = (List) getSqlMapClientTemplate().queryForList("s_user.getParentUsersById", userId);
		return userList;
	}

	@Override
	public List<SUser> getUserPageList(Long pageNumber, int pageSize,
			SUser userInfo) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("startRow", startRow);
		queryMap.put("endRow", endRow);
		if(userInfo.getLoginName()!=null){
			queryMap.put("loginName", userInfo.getLoginName());
		}
		if(userInfo.getUserName()!=null){
			queryMap.put("userName", userInfo.getUserName());
		}
    	List userList  = getSqlMapClientTemplate().queryForList("s_user.getUserPageList",queryMap);
		return userList;
	}

    public List<SUser> getOpenUserList(Map queryMap) { 
    	List userList  = getSqlMapClientTemplate().queryForList("s_user.getOpenUserList", queryMap);
		return userList;
	}

	public Integer getOpenUserCount(Map queryMap) { 
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject("s_user.getOpenUserCount", queryMap);
		return count;
	}

	@Override
	public Integer getUserCountByUser(SUser userInfo) {
		
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		if(userInfo.getLoginName()!=null){
			queryMap.put("loginName", userInfo.getLoginName());
		}
		if(userInfo.getUserName()!=null){
			queryMap.put("userName", userInfo.getUserName());
		}
    	Integer temp  = (Integer) getSqlMapClientTemplate().queryForObject("s_user.getUserCountByUser",queryMap);
		return temp;
	}
	
	public List<SUser> getUserListByPositionId(Integer positionId) {
		return getSqlMapClientTemplate().queryForList("s_user.getUserListByPositionId", positionId);
	}

	@Override
	public Integer getUserPageCount(SUser userInfo) {
		
		Integer temp  = (Integer) getSqlMapClientTemplate().queryForObject("s_user.getUserPageCount",userInfo);
		return temp;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SUserDAO#getUserByK3Name(java.lang.String)
	 */
	@Override
	public SUser getUserByK3Name(String k3UserName) {
		List<SUser> list = getSqlMapClientTemplate().queryForList(
				"s_user.getUserByK3Name", k3UserName);
		if(list.size() == 0 || list.size() >1)
			return null;
		else
			return list.get(0);
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.SUserDAO#getParentSalers()
	 */
	@Override
	public List<SUser> selectParentSalers() {
		List<SUser> list = getSqlMapClientTemplate().queryForList(
				"s_user.selectParentSalers");
		return list;
	}
	
	
	
}