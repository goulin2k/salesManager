package com.sales.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sales.common.Constants;
import com.sales.common.NormalFun;
import com.sales.dao.TCustomerDAO;
import com.sales.model.K3OrderCustomerStatistics;
import com.sales.model.SCustomerUser;
import com.sales.model.TCustomer;

import my.com.ibatis.core.dao.support.Page;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class TCustomerDAOImpl extends SqlMapClientDaoSupport implements TCustomerDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public TCustomerDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public void insert(TCustomer record) {
        getSqlMapClientTemplate().insert("t_customer.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public int updateByPrimaryKey(TCustomer record) {
        int rows = getSqlMapClientTemplate().update("t_customer.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public int updateByPrimaryKeySelective(TCustomer record) {
        int rows = getSqlMapClientTemplate().update("t_customer.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public TCustomer selectByPrimaryKey(Integer flevel, Integer customerId) {
        TCustomer key = new TCustomer();
        key.setFlevel(flevel);
        key.setCustomerId(customerId);
        TCustomer record = (TCustomer) getSqlMapClientTemplate().queryForObject("t_customer.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table t_customer
     *
     * @abatorgenerated Fri Jun 14 14:24:14 CST 2013
     */
    public int deleteByPrimaryKey(Integer flevel, Integer customerId) {
        TCustomer key = new TCustomer();
        key.setFlevel(flevel);
        key.setCustomerId(customerId);
        int rows = getSqlMapClientTemplate().delete("t_customer.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

	@Override
	public List<TCustomer> getCustomerList(Long pageNumber, int pageSize) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		queryMap.put("startRow", startRow);
		queryMap.put("endRow", endRow);
		List customerList = getSqlMapClientTemplate().queryForList("t_customer.getCustomerList",queryMap);
		return customerList;
	}
	
	public Integer getCustomerCount(){
		Integer temp = (Integer) getSqlMapClientTemplate().queryForObject("t_customer.getCustomerCount");
		return temp;
	}

	@Override
	public TCustomer getCustomerInfoById(Integer customerId) {
		
		TCustomer tcustomer = (TCustomer) getSqlMapClientTemplate().queryForObject("t_customer.getCustomerInfoById",customerId);
		return tcustomer;
	}

	@Override
	public List<TCustomer> selectCustomerList(Long pageNumber, int pageSize,
			TCustomer tcustomer) {
		
		long startRow = Page.getStartOfPage(pageNumber, pageSize);
		long endRow = pageSize;
		Map<String,Comparable> queryMap = new HashMap<String,Comparable>();
		if(tcustomer.getEvaFinGenId()!=null && tcustomer.getEvaFinGenId() == Constants.NOT_ASSASE_MARK ){
			tcustomer.setEvaFinGenMark(tcustomer.getEvaFinGenId());
			tcustomer.setEvaFinGenId(null);
		}
		if(tcustomer.getEvaFinManagerId()!=null && tcustomer.getEvaFinManagerId() == Constants.NOT_CUSTOMER_CREDIT_MARK ){
			tcustomer.setEvaFinManagerMark(tcustomer.getEvaFinManagerId());
			tcustomer.setEvaFinManagerId(null);
		}
		if(tcustomer.getEvaFinSalemagagerId()!=null && tcustomer.getEvaFinSalemagagerId() == Constants.NOT_ASSASE_MARK ){
			tcustomer.setEvaFinSalemagagerMark(tcustomer.getEvaFinSalemagagerId());
			tcustomer.setEvaFinSalemagagerId(null);
		}
		if(tcustomer.getCustomerLevel()!=null && tcustomer.getCustomerLevel() == Constants.NOT_CUSTOMER_LEVEL_MARK ){
			tcustomer.setCustomerLevelMark(tcustomer.getCustomerLevel());
			tcustomer.setCustomerLevel(null);
		}
		queryMap.put("startRow", startRow);
		queryMap.put("endRow", endRow);
		queryMap.put("fname", NormalFun.trimNull(tcustomer.getFname()));
		queryMap.put("fnumber", NormalFun.trimNull(tcustomer.getFnumber()));
		queryMap.put("customerLevel", tcustomer.getCustomerLevel());
		//queryMap.put("evaFinId", tcustomer.getEvaFinId());
		queryMap.put("couserName", NormalFun.trimNull(tcustomer.getCouserName()));
		queryMap.put("cuserName", NormalFun.trimNull(tcustomer.getCuserName()));
		queryMap.put("evaFinGenId", tcustomer.getEvaFinGenId());
		queryMap.put("evaFinManagerId", tcustomer.getEvaFinManagerId());
		queryMap.put("evaFinSalemagagerId", tcustomer.getEvaFinSalemagagerId());
		queryMap.put("evaFinSalemagagerMark", tcustomer.getEvaFinSalemagagerMark());
		queryMap.put("evaFinManagerMark", tcustomer.getEvaFinManagerMark());
		queryMap.put("evaFinGenMark", tcustomer.getEvaFinGenMark());
		queryMap.put("customerLevelMark", tcustomer.getCustomerLevelMark());
		queryMap.put("linkmanWriteStatus", tcustomer.getLinkmanWriteStatus());
		List customerList = getSqlMapClientTemplate().queryForList("t_customer.selectCustomerList",queryMap);
		return customerList;
	}

	@Override
	public Integer getCustomerCountByObj(TCustomer tcustomer) {
		
		if(tcustomer.getEvaFinGenId()!=null && 
				tcustomer.getEvaFinGenId() == Constants.NOT_ASSASE_MARK ){
			tcustomer.setEvaFinGenMark(tcustomer.getEvaFinGenId());
			tcustomer.setEvaFinGenId(null);
		}
		if(tcustomer.getEvaFinManagerId()!=null && 
				tcustomer.getEvaFinManagerId() == Constants.NOT_CUSTOMER_CREDIT_MARK ){
			tcustomer.setEvaFinManagerMark(tcustomer.getEvaFinManagerId());
			tcustomer.setEvaFinManagerId(null);
		}
		if(tcustomer.getEvaFinSalemagagerId()!=null && 
				tcustomer.getEvaFinSalemagagerId() == Constants.NOT_ASSASE_MARK ){
			tcustomer.setEvaFinSalemagagerMark(tcustomer.getEvaFinSalemagagerId());
			tcustomer.setEvaFinSalemagagerId(null);
		}
		if(tcustomer.getCustomerLevel()!=null && tcustomer.getCustomerLevel() == Constants.NOT_CUSTOMER_LEVEL_MARK ){
			tcustomer.setCustomerLevelMark(tcustomer.getCustomerLevel());
			tcustomer.setCustomerLevel(null);
		}
		if(tcustomer.getFname()== null || tcustomer.getFname().trim().length()<1 )
			tcustomer.setFname(null);
		if(tcustomer.getCuserName()== null || tcustomer.getCuserName().trim().length()<1 )
			tcustomer.setCuserName(null);
		if(tcustomer.getCouserName()== null || tcustomer.getCouserName().trim().length()<1 )
			tcustomer.setCouserName(null);
		
		Integer temp = (Integer) getSqlMapClientTemplate().queryForObject("t_customer.getCustomerCountByObj",tcustomer);
		return temp;
	}
	
	public List<TCustomer> getOpenCustomerList(Map queryMap) {  
		List customerList = getSqlMapClientTemplate().queryForList("t_customer.getOpenCustomerList", queryMap); 
		return customerList;
	}
	
	public Integer getOpenCustomerCount(Map queryMap) { 
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject("t_customer.getOpenCustomerCount", queryMap);
		return count;
	}
	
	public List<TCustomer> getOpenDistributionCustomerList(Map queryMap) {  
		List customerList = getSqlMapClientTemplate().queryForList("t_customer.getOpenDistributionCustomerList", queryMap); 
		return customerList;
	}
	
	public Integer getOpenDistributionCustomerCount(Map queryMap) { 
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject("t_customer.getOpenDistributionCustomerCount", queryMap);
		return count;
	}

	@Override
	public Integer getCustomerCountByFilter(Map queryMap) {
		
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject("t_customer.getCustomerCountByFilter", queryMap);
		return count;
	}

	@Override
	public List<TCustomer> getCustomerListByFilter(Map queryMap) {
		
		List customerList = getSqlMapClientTemplate().queryForList("t_customer.getCustomerListByFilter", queryMap);
		return customerList;
	}

	/* (non-Javadoc)
	 * @see com.sales.dao.TCustomerDAO#updateLinkmanCompletely(int, java.lang.Double)
	 */
	@Override
	public void updateLinkmanCompletely(int customerId, Double completely) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("customerId", customerId);
		map.put("linkmanCompletely", completely);
		
		getSqlMapClientTemplate().update("t_customer.updateLinkmanCompletely", map);
	}
	
	
}